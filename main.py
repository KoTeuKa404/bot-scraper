import os
import re
import html
import asyncio

from typing import Dict, List
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.client.default import DefaultBotProperties

from scraper_workua import search_workua_detailed, scrape_workua_job

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

def reply_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üì∞ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó"), KeyboardButton(text="üßπ –ü—Ä–∏–±—Ä–∞—Ç–∏ –º–µ–Ω—é")],
        ],
    )

def inline_under_job(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ Work.ua", url=url),
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"refresh|{url}"),
        ]]
    )

def _fmt_job_card(job: Dict) -> str:
    tasks = "‚Ä¢ " + "\n‚Ä¢ ".join(job.get("tasks", [])) if job.get("tasks") else "‚Äî"
    expect = "‚Ä¢ " + "\n‚Ä¢ ".join(job.get("expectations", [])) if job.get("expectations") else ""
    desc = "\n\n".join(job.get("description", [])) if job.get("description") else ""

    text = (
        f"üìå <b>{html.escape(job['title'])}</b>\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω—ñ—è: <b>{html.escape(job['company'])}</b>\n"
        f"üíº –ó–∞–π–Ω—è—Ç—ñ—Å—Ç—å: {html.escape(job['employment'])}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {html.escape(job['salary'])}\n"
        f"üìÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {html.escape(job['posted'])}\n\n"
    )
    if expect:
        text += f"üß© <b>–©–æ –º–∏ –æ—á—ñ–∫—É—î–º–æ:</b>\n{html.escape(expect)}\n\n"
    text += f"üîπ <b>–¢–≤–æ—ó –∑–∞–¥–∞—á—ñ:</b>\n{html.escape(tasks)}\n\n"
    text += f"üîó <a href='{job['url']}'>–î–µ—Ç–∞–ª—ñ –Ω–∞ Work.ua</a>"
    if desc:
        text += f"\n\nüìù <b>–ö–æ—Ä–æ—Ç–∫–æ:</b>\n{html.escape(desc)}"
    return text

def _fmt_results_text(rows: List[Dict], query: str) -> str:
    lines = [
        f"–ó–Ω–∞–π—à–æ–≤ {len(rows)} –≤–∞–∫–∞–Ω—Å—ñ–π –∑–∞ –∑–∞–ø–∏—Ç–æ–º: <b>{html.escape(query)}</b>\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–æ–º–µ—Ä, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ üëá",
        ""
    ]
    for i, r in enumerate(rows, 1):
        title = html.escape(r.get("title", "‚Äî"))
        company = html.escape(r.get("company", "‚Äî"))
        salary = html.escape(r.get("salary", "‚Äî"))
        emp = html.escape(r.get("employment", "‚Äî"))
        extras = " ¬∑ ".join([x for x in (company, salary, emp) if x and x != "‚Äî"])
        line = f"<b>{i}.</b> {title}"
        if extras:
            line += f" ‚Äî {extras}"
        lines.append(line)
    return "\n".join(lines)

def _make_index_keyboard(n: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    row: List[InlineKeyboardButton] = []
    for i in range(1, n + 1):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"open:{i-1}"))
        if i % 5 == 0:
            kb.inline_keyboard.append(row)
            row = []
    if row:
        kb.inline_keyboard.append(row)
    return kb

_WORKUA_JOB_RE = re.compile(r"https?://(www\.)?work\.ua/jobs/\d+/?", re.I)

def _is_workua_job_url(url: str) -> bool:
    return bool(_WORKUA_JOB_RE.fullmatch(url.strip()))

async def _search_detailed_async(q: str, limit: int = 10) -> List[Dict]:
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, search_workua_detailed, q, limit)

async def _scrape_async(url: str) -> Dict:
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, scrape_workua_job, url)

JOB_CACHE: dict[int, List[Dict]] = {}

class ParsSite(StatesGroup):
    waiting_for_url = State()

@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à—É–∫–∞—é —Ç–∞ —Å—Ç–∏—Å–ª–æ –æ–ø–∏—Å—É—é –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ Work.ua.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ <code>/job python django</code> ‚Äî –∑–Ω–∞–π—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ <code>/pars site</code> ‚Äî –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π URL –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –ø–∞—Ä—Å—É\n\n"
        "–ü—ñ–¥—Ç—Ä–∏–º—É—é –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ <i>remote/–≤—ñ–¥–¥–∞–ª–µ–Ω–æ/–¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ</i>.\n"
        "–£ –ø–æ—à—É–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ñ—ñ–ª—å—Ç—Ä ¬´–®—É–∫–∞—Ç–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ —É –∑–∞–≥–æ–ª–æ–≤–∫—É¬ª.",
        reply_markup=reply_menu(),
    )

@dp.message(Command("job"))
async def cmd_job(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) == 1:
        await message.answer(
            "–ù–∞–ø–∏—à–∏ —Ç–∞–∫: <code>/job remote python django</code>\n"
            " –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è /job."
        )
        return

    query = parts[1].strip()
    await message.answer("–®—É–∫–∞—é –≤–∞–∫–∞–Ω—Å—ñ—ó‚Ä¶")

    try:
        rows = await _search_detailed_async(query, limit=10)
        if not rows:
            await message.answer("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ üòï. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")
            return

        JOB_CACHE[message.from_user.id] = rows

        await message.answer(
            _fmt_results_text(rows, query),
            reply_markup=_make_index_keyboard(len(rows))
        )
    except Exception as e:
        print("[/job search error]", e)
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É.")

@dp.callback_query(lambda c: c.data.startswith("open:"))
async def on_open_job(cb: types.CallbackQuery):
    try:
        idx = int(cb.data.split(":")[1])
        rows = JOB_CACHE.get(cb.from_user.id, [])
        if idx < 0 or idx >= len(rows):
            await cb.answer("–°–ø–∏—Å–æ–∫ –∑–∞—Å—Ç–∞—Ä—ñ–≤. –ó—Ä–æ–±–∏ –Ω–æ–≤–∏–π –ø–æ—à—É–∫ /job.")
            return

        processing_msg = await cb.message.answer("‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞–∫–∞–Ω—Å—ñ—é...")

        url = rows[idx]["url"]
        job = await _scrape_async(url)

        await processing_msg.delete()

        await cb.message.answer(
            _fmt_job_card(job),
            disable_web_page_preview=False,
            reply_markup=inline_under_job(job["url"]),
        )
        await cb.answer()
    except Exception as e:
        print("[open job error]", e)
        await cb.answer("–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é.")

@dp.callback_query(lambda c: c.data.startswith("refresh|"))
async def on_refresh(cb: types.CallbackQuery):
    _, url = cb.data.split("|", 1)
    try:
        job = await _scrape_async(url)
        await cb.message.edit_text(
            _fmt_job_card(job),
            disable_web_page_preview=False,
            reply_markup=inline_under_job(job["url"]),
        )
        await cb.answer("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
    except Exception as e:
        await cb.answer("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        print("[inline refresh error]", e)

@dp.message(lambda m: m.text in {"üì∞ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó", "üßπ –ü—Ä–∏–±—Ä–∞—Ç–∏ –º–µ–Ω—é"})
async def on_reply_buttons(message: types.Message):
    if message.text == "üì∞ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó":
        await message.answer(
            "–í–≤–µ–¥–∏ –∑–∞–ø–∏—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: <code>/job python django</code>\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>/job remote python junior</code>"
        )
    else:
        await message.answer("–û–∫, –ø—Ä–∏—Ö–æ–≤–∞–≤ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command("pars"))
async def cmd_pars(message: types.Message, state: FSMContext):
    parts = message.text.split(maxsplit=1)
    if len(parts) == 1:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/pars site</code> ‚Äî –¥–∞–ª—ñ –Ω–∞–¥—ñ—à–ª–∏ URL –≤–∞–∫–∞–Ω—Å—ñ—ó Work.ua")
        return

    arg = parts[1].strip()
    if arg.lower() == "site":
        await message.answer("–ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤–Ω–∏–π URL –≤–∞–∫–∞–Ω—Å—ñ—ó Work.ua (https://www.work.ua/jobs/<id>/).")
        await state.set_state(ParsSite.waiting_for_url)
        return

    if _is_workua_job_url(arg):
        try:
            job = await _scrape_async(arg)
            await message.answer(
                _fmt_job_card(job),
                disable_web_page_preview=False,
                reply_markup=inline_under_job(job["url"]),
            )
        except Exception as e:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é. –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
            print("[/pars url error]", e)
        return

    await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ê–±–æ /pars site, –∞–±–æ /job <–∑–∞–ø–∏—Ç>.")

@dp.message(ParsSite.waiting_for_url)
async def pars_receive_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    if not _is_workua_job_url(url):
        await message.answer("–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ URL –≤–∞–∫–∞–Ω—Å—ñ—ó Work.ua. –ü—Ä–∏–∫–ª–∞–¥:\nhttps://www.work.ua/jobs/7208953/")
        return
    try:
        job = await _scrape_async(url)
        await message.answer(
            _fmt_job_card(job),
            disable_web_page_preview=False,
            reply_markup=inline_under_job(job["url"]),
        )
    except Exception as e:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π URL –∞–±–æ –ø—ñ–∑–Ω—ñ—à–µ.")
        print("[pars state error]", e)
    finally:
        await state.clear()

async def main():
    print("Aiogram v3 bot is running...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
